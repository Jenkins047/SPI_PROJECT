/* Generated by Yosys 0.11+3 (git sha1 UNKNOWN, gcc 11.2.1 -O2 -fexceptions -fstack-protector-strong -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -fPIC -Os) */

module spi_master_rtl(i_clk, i_rst, i_data, i_send, o_data, o_busy, i_miso, o_mosi, o_sclk, o_ss);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire [4:0] _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  input i_clk;
  input [4:0] i_data;
  input i_miso;
  input i_rst;
  input i_send;
  output o_busy;
  output [4:0] o_data;
  output o_mosi;
  reg o_mosi;
  output o_sclk;
  output o_ss;
  wire s_bit;
  reg s_bit_in;
  wire s_inter;
  wire s_sin_en;
  wire s_sin_wrt;
  wire s_sout_en;
  wire s_sout_wrt;
  reg [2:0] s_state;
  wire [2:0] s_state_next;
  wire s_watchdog_we;
  wire \shift.i_bit ;
  wire \shift.i_clk_p ;
  wire [4:0] \shift.i_data ;
  wire \shift.i_en ;
  wire \shift.i_rst_n ;
  wire \shift.i_wrt ;
  wire \shift.o_bit ;
  wire [4:0] \shift.o_data ;
  reg [4:0] \shift.s_shifter ;
  wire \watchdog.i_clk_p ;
  wire [3:0] \watchdog.i_cycles ;
  wire \watchdog.i_rst_n ;
  wire \watchdog.i_we ;
  wire \watchdog.o_inter ;
  reg [3:0] \watchdog.s_count ;
  wire [3:0] \watchdog.s_count_next ;
  reg [3:0] \watchdog.s_cycles ;
  assign _001_ = ~s_state[1];
  assign _002_ = ~s_state[2];
  assign s_sout_wrt = s_state[0] & _001_;
  assign _003_ = s_state[0] | s_state[1];
  assign _004_ = ~_003_;
  assign _005_ = s_state[1] & s_state[2];
  assign _006_ = _001_ | _002_;
  assign o_ss = _004_ | _005_;
  assign s_sout_en = ~o_ss;
  assign _007_ = s_state[2] | _003_;
  assign _008_ = _002_ & _003_;
  assign o_busy = _006_ & _007_;
  assign _000_ = i_send | _007_;
  assign _009_ = s_state[0] & s_state[1];
  assign _010_ = ~_009_;
  assign o_sclk = _008_ & _010_;
  assign _011_ = s_state[0] | _002_;
  assign s_state_next[0] = _010_ & _011_;
  assign _012_ = s_inter & _009_;
  assign _013_ = ~_012_;
  assign _014_ = _004_ | _012_;
  assign s_state_next[1] = _008_ & _013_;
  assign s_state_next[2] = _002_ & _014_;
  always @(posedge i_clk, negedge i_rst)
    if (!i_rst) s_state[0] <= 1'h0;
    else if (_000_) s_state[0] <= s_state_next[0];
  always @(posedge i_clk, negedge i_rst)
    if (!i_rst) s_state[1] <= 1'h0;
    else if (_000_) s_state[1] <= s_state_next[1];
  always @(posedge i_clk, negedge i_rst)
    if (!i_rst) s_state[2] <= 1'h0;
    else if (_000_) s_state[2] <= s_state_next[2];
  always @(posedge o_sclk, negedge i_rst)
    if (!i_rst) s_bit_in <= 1'h0;
    else s_bit_in <= i_miso;
  always @(negedge o_sclk, negedge i_rst)
    if (!i_rst) o_mosi <= 1'h0;
    else o_mosi <= s_bit;
  assign _016_ = ~\shift.i_wrt ;
  assign _017_ = \shift.i_data [0] & \shift.i_wrt ;
  assign _018_ = \shift.i_bit  & _016_;
  assign _015_[0] = _017_ | _018_;
  assign _019_ = \shift.i_wrt  & \shift.i_data [1];
  assign _020_ = _016_ & \shift.s_shifter [0];
  assign _015_[1] = _019_ | _020_;
  assign _021_ = \shift.i_wrt  & \shift.i_data [2];
  assign _022_ = _016_ & \shift.s_shifter [1];
  assign _015_[2] = _021_ | _022_;
  assign _023_ = \shift.i_wrt  & \shift.i_data [3];
  assign _024_ = _016_ & \shift.s_shifter [2];
  assign _015_[3] = _023_ | _024_;
  assign _025_ = \shift.i_wrt  & \shift.i_data [4];
  assign _026_ = _016_ & \shift.s_shifter [3];
  assign _015_[4] = _025_ | _026_;
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [0] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [0] <= _015_[0];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [1] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [1] <= _015_[1];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [2] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [2] <= _015_[2];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [3] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [3] <= _015_[3];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [4] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [4] <= _015_[4];
  assign _027_ = ~\watchdog.s_count [2];
  assign _028_ = ~\watchdog.s_count [3];
  assign _029_ = ~\watchdog.i_we ;
  assign _030_ = \watchdog.s_count [1] | \watchdog.s_count [0];
  assign _031_ = ~_030_;
  assign _032_ = _027_ & _031_;
  assign _033_ = \watchdog.s_count [2] | _030_;
  assign _034_ = _028_ & _032_;
  assign _035_ = \watchdog.s_count [3] | _033_;
  assign _036_ = \watchdog.s_cycles [0] | \watchdog.s_cycles [3];
  assign _037_ = \watchdog.s_cycles [1] | \watchdog.s_cycles [2];
  assign _038_ = _036_ | _037_;
  assign _039_ = _029_ & _038_;
  assign \watchdog.o_inter  = _034_ & _039_;
  assign _040_ = \watchdog.s_cycles [0] | _035_;
  assign _041_ = \watchdog.s_count [0] | \watchdog.i_we ;
  assign _042_ = ~_041_;
  assign _043_ = _040_ & _042_;
  assign _044_ = \watchdog.i_we  & \watchdog.i_cycles [0];
  assign \watchdog.s_count_next [0] = _043_ | _044_;
  assign _045_ = \watchdog.s_cycles [1] | _035_;
  assign _046_ = \watchdog.s_count [1] ^ \watchdog.s_count [0];
  assign _047_ = \watchdog.i_we  | _046_;
  assign _048_ = ~_047_;
  assign _049_ = _045_ & _048_;
  assign _050_ = \watchdog.i_we  & \watchdog.i_cycles [1];
  assign \watchdog.s_count_next [1] = _049_ | _050_;
  assign _051_ = \watchdog.s_count [3] | \watchdog.s_cycles [2];
  assign _052_ = _032_ & _051_;
  assign _053_ = \watchdog.s_count [2] & _030_;
  assign _054_ = _029_ | \watchdog.i_cycles [2];
  assign _055_ = \watchdog.i_we  | _053_;
  assign _056_ = _052_ | _055_;
  assign \watchdog.s_count_next [2] = _054_ & _056_;
  assign _057_ = \watchdog.s_cycles [3] & _034_;
  assign _058_ = \watchdog.s_count [3] & _033_;
  assign _059_ = \watchdog.i_we  | _058_;
  assign _060_ = _057_ | _059_;
  assign _061_ = _029_ | \watchdog.i_cycles [3];
  assign \watchdog.s_count_next [3] = _060_ & _061_;
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_cycles [0] <= 1'h0;
    else if (\watchdog.i_we ) \watchdog.s_cycles [0] <= \watchdog.i_cycles [0];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_cycles [1] <= 1'h0;
    else if (\watchdog.i_we ) \watchdog.s_cycles [1] <= \watchdog.i_cycles [1];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_cycles [2] <= 1'h0;
    else if (\watchdog.i_we ) \watchdog.s_cycles [2] <= \watchdog.i_cycles [2];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_cycles [3] <= 1'h0;
    else if (\watchdog.i_we ) \watchdog.s_cycles [3] <= \watchdog.i_cycles [3];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_count [0] <= 1'h0;
    else \watchdog.s_count [0] <= \watchdog.s_count_next [0];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_count [1] <= 1'h0;
    else \watchdog.s_count [1] <= \watchdog.s_count_next [1];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_count [2] <= 1'h0;
    else \watchdog.s_count [2] <= \watchdog.s_count_next [2];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_count [3] <= 1'h0;
    else \watchdog.s_count [3] <= \watchdog.s_count_next [3];
  assign s_sin_en = 1'h0;
  assign s_sin_wrt = 1'h0;
  assign s_watchdog_we = s_sout_wrt;
  assign \watchdog.i_clk_p  = o_sclk;
  assign \watchdog.i_cycles  = 4'h5;
  assign \watchdog.i_rst_n  = i_rst;
  assign \watchdog.i_we  = s_sout_wrt;
  assign s_inter = \watchdog.o_inter ;
  assign \shift.o_bit  = \shift.s_shifter [4];
  assign \shift.o_data  = \shift.s_shifter ;
  assign \shift.i_bit  = s_bit_in;
  assign \shift.i_clk_p  = o_sclk;
  assign \shift.i_data  = i_data;
  assign \shift.i_en  = s_sout_en;
  assign \shift.i_rst_n  = i_rst;
  assign \shift.i_wrt  = s_sout_wrt;
  assign s_bit = \shift.o_bit ;
  assign o_data = \shift.o_data ;
endmodule
