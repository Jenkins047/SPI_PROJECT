/* Generated by Yosys 0.12+54 (git sha1 59a715034, gcc 9.3.0-17ubuntu1~20.04 -fPIC -Os) */

module spi_master_rtl(i_clk, i_rst, i_data, i_send, o_data, o_busy, i_miso, o_mosi, o_sclk, o_ss);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire [22:0] _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  input i_clk;
  input [22:0] i_data;
  input i_miso;
  input i_rst;
  input i_send;
  output o_busy;
  output [22:0] o_data;
  output o_mosi;
  reg o_mosi;
  output o_sclk;
  output o_ss;
  wire s_bit;
  reg s_bit_in;
  wire s_inter;
  wire s_sin_en;
  wire s_sin_wrt;
  wire s_sout_en;
  wire s_sout_wrt;
  reg [2:0] s_state;
  wire [2:0] s_state_next;
  wire s_watchdog_we;
  wire \shift.i_bit ;
  wire \shift.i_clk_p ;
  wire [22:0] \shift.i_data ;
  wire \shift.i_en ;
  wire \shift.i_rst_n ;
  wire \shift.i_wrt ;
  wire \shift.o_bit ;
  wire [22:0] \shift.o_data ;
  reg [22:0] \shift.s_shifter ;
  wire \watchdog.i_clk_p ;
  wire [5:0] \watchdog.i_cycles ;
  wire \watchdog.i_rst_n ;
  wire \watchdog.i_we ;
  wire \watchdog.o_inter ;
  reg [5:0] \watchdog.s_count ;
  wire [5:0] \watchdog.s_count_next ;
  reg [5:0] \watchdog.s_cycles ;
  assign _001_ = ~s_state[1];
  assign _002_ = ~s_state[2];
  assign s_sout_wrt = s_state[0] & _001_;
  assign _003_ = s_state[0] | s_state[1];
  assign _004_ = ~_003_;
  assign _005_ = s_state[1] & s_state[2];
  assign _006_ = _001_ | _002_;
  assign o_ss = _004_ | _005_;
  assign s_sout_en = ~o_ss;
  assign _007_ = s_state[2] | _003_;
  assign _008_ = _002_ & _003_;
  assign o_busy = _006_ & _007_;
  assign _000_ = i_send | _007_;
  assign _009_ = s_state[0] & s_state[1];
  assign _010_ = ~_009_;
  assign o_sclk = _008_ & _010_;
  assign _011_ = s_state[0] | _002_;
  assign s_state_next[0] = _010_ & _011_;
  assign _012_ = s_inter & _009_;
  assign _013_ = ~_012_;
  assign _014_ = _004_ | _012_;
  assign s_state_next[1] = _008_ & _013_;
  assign s_state_next[2] = _002_ & _014_;
  always @(posedge i_clk, negedge i_rst)
    if (!i_rst) s_state[0] <= 1'h0;
    else if (_000_) s_state[0] <= s_state_next[0];
  always @(posedge i_clk, negedge i_rst)
    if (!i_rst) s_state[1] <= 1'h0;
    else if (_000_) s_state[1] <= s_state_next[1];
  always @(posedge i_clk, negedge i_rst)
    if (!i_rst) s_state[2] <= 1'h0;
    else if (_000_) s_state[2] <= s_state_next[2];
  always @(posedge o_sclk, negedge i_rst)
    if (!i_rst) s_bit_in <= 1'h0;
    else s_bit_in <= i_miso;
  always @(negedge o_sclk, negedge i_rst)
    if (!i_rst) o_mosi <= 1'h0;
    else o_mosi <= s_bit;
  assign _043_ = ~\shift.i_wrt ;
  assign _044_ = \shift.i_data [0] & \shift.i_wrt ;
  assign _045_ = \shift.i_bit  & _043_;
  assign _015_[0] = _044_ | _045_;
  assign _046_ = \shift.i_wrt  & \shift.i_data [1];
  assign _047_ = _043_ & \shift.s_shifter [0];
  assign _015_[1] = _046_ | _047_;
  assign _048_ = \shift.i_wrt  & \shift.i_data [2];
  assign _049_ = _043_ & \shift.s_shifter [1];
  assign _015_[2] = _048_ | _049_;
  assign _050_ = \shift.i_wrt  & \shift.i_data [3];
  assign _051_ = _043_ & \shift.s_shifter [2];
  assign _015_[3] = _050_ | _051_;
  assign _052_ = \shift.i_wrt  & \shift.i_data [4];
  assign _053_ = _043_ & \shift.s_shifter [3];
  assign _015_[4] = _052_ | _053_;
  assign _054_ = \shift.i_wrt  & \shift.i_data [5];
  assign _055_ = _043_ & \shift.s_shifter [4];
  assign _015_[5] = _054_ | _055_;
  assign _056_ = \shift.i_wrt  & \shift.i_data [6];
  assign _057_ = _043_ & \shift.s_shifter [5];
  assign _015_[6] = _056_ | _057_;
  assign _058_ = \shift.i_wrt  & \shift.i_data [7];
  assign _059_ = _043_ & \shift.s_shifter [6];
  assign _015_[7] = _058_ | _059_;
  assign _060_ = \shift.i_wrt  & \shift.i_data [8];
  assign _061_ = _043_ & \shift.s_shifter [7];
  assign _015_[8] = _060_ | _061_;
  assign _062_ = \shift.i_wrt  & \shift.i_data [9];
  assign _016_ = _043_ & \shift.s_shifter [8];
  assign _015_[9] = _062_ | _016_;
  assign _017_ = \shift.i_wrt  & \shift.i_data [10];
  assign _018_ = _043_ & \shift.s_shifter [9];
  assign _015_[10] = _017_ | _018_;
  assign _019_ = \shift.i_wrt  & \shift.i_data [11];
  assign _020_ = _043_ & \shift.s_shifter [10];
  assign _015_[11] = _019_ | _020_;
  assign _021_ = \shift.i_wrt  & \shift.i_data [12];
  assign _022_ = _043_ & \shift.s_shifter [11];
  assign _015_[12] = _021_ | _022_;
  assign _023_ = \shift.i_wrt  & \shift.i_data [13];
  assign _024_ = _043_ & \shift.s_shifter [12];
  assign _015_[13] = _023_ | _024_;
  assign _025_ = \shift.i_wrt  & \shift.i_data [14];
  assign _026_ = _043_ & \shift.s_shifter [13];
  assign _015_[14] = _025_ | _026_;
  assign _027_ = \shift.i_wrt  & \shift.i_data [15];
  assign _028_ = _043_ & \shift.s_shifter [14];
  assign _015_[15] = _027_ | _028_;
  assign _029_ = \shift.i_wrt  & \shift.i_data [16];
  assign _030_ = _043_ & \shift.s_shifter [15];
  assign _015_[16] = _029_ | _030_;
  assign _031_ = \shift.i_wrt  & \shift.i_data [17];
  assign _032_ = _043_ & \shift.s_shifter [16];
  assign _015_[17] = _031_ | _032_;
  assign _033_ = \shift.i_wrt  & \shift.i_data [18];
  assign _034_ = _043_ & \shift.s_shifter [17];
  assign _015_[18] = _033_ | _034_;
  assign _035_ = \shift.i_wrt  & \shift.i_data [19];
  assign _036_ = _043_ & \shift.s_shifter [18];
  assign _015_[19] = _035_ | _036_;
  assign _037_ = \shift.i_wrt  & \shift.i_data [20];
  assign _038_ = _043_ & \shift.s_shifter [19];
  assign _015_[20] = _037_ | _038_;
  assign _039_ = \shift.i_wrt  & \shift.i_data [21];
  assign _040_ = _043_ & \shift.s_shifter [20];
  assign _015_[21] = _039_ | _040_;
  assign _041_ = \shift.i_wrt  & \shift.i_data [22];
  assign _042_ = _043_ & \shift.s_shifter [21];
  assign _015_[22] = _041_ | _042_;
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [0] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [0] <= _015_[0];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [1] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [1] <= _015_[1];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [2] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [2] <= _015_[2];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [3] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [3] <= _015_[3];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [4] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [4] <= _015_[4];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [5] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [5] <= _015_[5];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [6] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [6] <= _015_[6];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [7] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [7] <= _015_[7];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [8] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [8] <= _015_[8];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [9] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [9] <= _015_[9];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [10] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [10] <= _015_[10];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [11] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [11] <= _015_[11];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [12] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [12] <= _015_[12];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [13] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [13] <= _015_[13];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [14] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [14] <= _015_[14];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [15] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [15] <= _015_[15];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [16] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [16] <= _015_[16];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [17] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [17] <= _015_[17];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [18] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [18] <= _015_[18];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [19] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [19] <= _015_[19];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [20] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [20] <= _015_[20];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [21] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [21] <= _015_[21];
  always @(posedge \shift.i_clk_p , negedge \shift.i_rst_n )
    if (!\shift.i_rst_n ) \shift.s_shifter [22] <= 1'h0;
    else if (\shift.i_en ) \shift.s_shifter [22] <= _015_[22];
  assign _070_ = ~_069_;
  assign _071_ = _064_ & _070_;
  assign _072_ = \watchdog.s_count [4] | _069_;
  assign _073_ = _063_ & _071_;
  assign _074_ = \watchdog.s_count [5] | _072_;
  assign _075_ = \watchdog.s_cycles [1] | \watchdog.s_cycles [0];
  assign _076_ = \watchdog.s_cycles [3] | \watchdog.s_cycles [2];
  assign _077_ = \watchdog.s_cycles [5] | \watchdog.s_cycles [4];
  assign _078_ = _076_ | _077_;
  assign _079_ = _075_ | _078_;
  assign _080_ = _066_ & _079_;
  assign \watchdog.o_inter  = _073_ & _080_;
  assign _081_ = \watchdog.s_cycles [0] & _073_;
  assign _082_ = _065_ & _074_;
  assign _083_ = _081_ | _082_;
  assign _084_ = _066_ & _083_;
  assign _085_ = \watchdog.i_we  & \watchdog.i_cycles [0];
  assign \watchdog.s_count_next [0] = _084_ | _085_;
  assign _086_ = _065_ ^ \watchdog.s_count [1];
  assign _087_ = _074_ & _086_;
  assign _088_ = \watchdog.s_cycles [1] & _073_;
  assign _089_ = _087_ | _088_;
  assign _090_ = _066_ & _089_;
  assign _091_ = \watchdog.i_we  & \watchdog.i_cycles [1];
  assign \watchdog.s_count_next [1] = _090_ | _091_;
  assign _092_ = \watchdog.s_cycles [2] | _074_;
  assign _093_ = \watchdog.s_count [2] ^ _067_;
  assign _094_ = \watchdog.i_we  & \watchdog.i_cycles [2];
  assign _095_ = \watchdog.i_we  | _093_;
  assign _096_ = ~_095_;
  assign _097_ = _092_ & _096_;
  assign \watchdog.s_count_next [2] = _094_ | _097_;
  assign _098_ = \watchdog.s_cycles [3] | _074_;
  assign _099_ = \watchdog.s_count [3] ^ _068_;
  assign _100_ = \watchdog.i_we  & \watchdog.i_cycles [3];
  assign _101_ = \watchdog.i_we  | _099_;
  assign _102_ = ~_101_;
  assign _103_ = _098_ & _102_;
  assign \watchdog.s_count_next [3] = _100_ | _103_;
  assign _104_ = \watchdog.s_count [5] | \watchdog.s_cycles [4];
  assign _105_ = _071_ & _104_;
  assign _106_ = \watchdog.s_count [4] & _069_;
  assign _107_ = _066_ | \watchdog.i_cycles [4];
  assign _108_ = \watchdog.i_we  | _106_;
  assign _109_ = _105_ | _108_;
  assign \watchdog.s_count_next [4] = _107_ & _109_;
  assign _110_ = \watchdog.s_cycles [5] & _073_;
  assign _111_ = \watchdog.s_count [5] & _072_;
  assign _112_ = _066_ | \watchdog.i_cycles [5];
  assign _113_ = \watchdog.i_we  | _111_;
  assign _114_ = _110_ | _113_;
  assign \watchdog.s_count_next [5] = _112_ & _114_;
  assign _063_ = ~\watchdog.s_count [5];
  assign _064_ = ~\watchdog.s_count [4];
  assign _065_ = ~\watchdog.s_count [0];
  assign _066_ = ~\watchdog.i_we ;
  assign _067_ = \watchdog.s_count [0] | \watchdog.s_count [1];
  assign _068_ = \watchdog.s_count [2] | _067_;
  assign _069_ = \watchdog.s_count [3] | _068_;
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_cycles [0] <= 1'h0;
    else if (\watchdog.i_we ) \watchdog.s_cycles [0] <= \watchdog.i_cycles [0];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_cycles [1] <= 1'h0;
    else if (\watchdog.i_we ) \watchdog.s_cycles [1] <= \watchdog.i_cycles [1];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_cycles [2] <= 1'h0;
    else if (\watchdog.i_we ) \watchdog.s_cycles [2] <= \watchdog.i_cycles [2];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_cycles [3] <= 1'h0;
    else if (\watchdog.i_we ) \watchdog.s_cycles [3] <= \watchdog.i_cycles [3];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_cycles [4] <= 1'h0;
    else if (\watchdog.i_we ) \watchdog.s_cycles [4] <= \watchdog.i_cycles [4];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_cycles [5] <= 1'h0;
    else if (\watchdog.i_we ) \watchdog.s_cycles [5] <= \watchdog.i_cycles [5];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_count [0] <= 1'h0;
    else \watchdog.s_count [0] <= \watchdog.s_count_next [0];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_count [1] <= 1'h0;
    else \watchdog.s_count [1] <= \watchdog.s_count_next [1];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_count [2] <= 1'h0;
    else \watchdog.s_count [2] <= \watchdog.s_count_next [2];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_count [3] <= 1'h0;
    else \watchdog.s_count [3] <= \watchdog.s_count_next [3];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_count [4] <= 1'h0;
    else \watchdog.s_count [4] <= \watchdog.s_count_next [4];
  always @(posedge \watchdog.i_clk_p , negedge \watchdog.i_rst_n )
    if (!\watchdog.i_rst_n ) \watchdog.s_count [5] <= 1'h0;
    else \watchdog.s_count [5] <= \watchdog.s_count_next [5];
  assign s_sin_en = 1'h0;
  assign s_sin_wrt = 1'h0;
  assign s_watchdog_we = s_sout_wrt;
  assign \watchdog.i_clk_p  = o_sclk;
  assign \watchdog.i_cycles  = 6'h17;
  assign \watchdog.i_rst_n  = i_rst;
  assign \watchdog.i_we  = s_sout_wrt;
  assign s_inter = \watchdog.o_inter ;
  assign \shift.o_bit  = \shift.s_shifter [22];
  assign \shift.o_data  = \shift.s_shifter ;
  assign \shift.i_bit  = s_bit_in;
  assign \shift.i_clk_p  = o_sclk;
  assign \shift.i_data  = i_data;
  assign \shift.i_en  = s_sout_en;
  assign \shift.i_rst_n  = i_rst;
  assign \shift.i_wrt  = s_sout_wrt;
  assign s_bit = \shift.o_bit ;
  assign o_data = \shift.o_data ;
endmodule
